-- =====================================================
-- GERİ ARAMA TALEP SİSTEMİ - TEK KAPSAMLI SQL DOSYASI
-- =====================================================
-- Proje: Dr. Şahin Durmuş Diş Hekimi Sitesi
-- Bu dosya geri arama sistemi için gereken TÜM SQL sorgularını içerir
-- Hiçbir başka SQL dosyasına ihtiyaç yoktur
-- =====================================================

-- =====================================================
-- 1. SİSTEM TEMİZLİĞİ VE KURULUM
-- =====================================================

-- Mevcut trigger'ları güvenli şekilde sil
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'handle_callback_requests_updated_at') THEN
        DROP TRIGGER handle_callback_requests_updated_at ON public.callback_requests;
    END IF;
END $$;

-- Function'ları sil
DROP FUNCTION IF EXISTS public.handle_updated_at() CASCADE;

-- Index'leri sil
DROP INDEX IF EXISTS public.idx_callback_requests_status;
DROP INDEX IF EXISTS public.idx_callback_requests_created_at;
DROP INDEX IF EXISTS public.idx_callback_requests_phone;
DROP INDEX IF EXISTS public.idx_callback_requests_name;
DROP INDEX IF EXISTS public.idx_callback_requests_status_created;

-- RLS politikalarını sil
DROP POLICY IF EXISTS "authenticated_full_access" ON public.callback_requests;
DROP POLICY IF EXISTS "anonymous_insert_only" ON public.callback_requests;
DROP POLICY IF EXISTS "anonymous_no_select" ON public.callback_requests;

-- Yedek tabloları sil
DROP TABLE IF EXISTS public.callback_requests_backup CASCADE;

-- Ana tabloyu sil
DROP TABLE IF EXISTS public.callback_requests CASCADE;

-- =====================================================
-- 2. TABLO OLUŞTURMA
-- =====================================================

CREATE TABLE public.callback_requests (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    phone text NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL,
    notes text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    called_at timestamp with time zone,
    
    CONSTRAINT callback_requests_status_check 
    CHECK (status IN ('pending', 'called', 'completed', 'cancelled')),
    
    CONSTRAINT callback_requests_phone_check 
    CHECK (LENGTH(REGEXP_REPLACE(phone, '[^0-9]', '', 'g')) >= 10),
    
    CONSTRAINT callback_requests_name_check 
    CHECK (LENGTH(TRIM(name)) > 0)
);

-- Tablo sahipliği ve güvenlik
ALTER TABLE public.callback_requests OWNER TO postgres;
ALTER TABLE public.callback_requests ENABLE ROW LEVEL SECURITY;

-- =====================================================
-- 3. INDEX'LER
-- =====================================================

CREATE INDEX idx_callback_requests_status 
ON public.callback_requests USING btree (status);

CREATE INDEX idx_callback_requests_created_at 
ON public.callback_requests USING btree (created_at DESC);

CREATE INDEX idx_callback_requests_phone 
ON public.callback_requests USING btree (phone);

CREATE INDEX idx_callback_requests_name 
ON public.callback_requests USING gin (to_tsvector('turkish', name));

CREATE INDEX idx_callback_requests_status_created 
ON public.callback_requests USING btree (status, created_at DESC);

-- =====================================================
-- 4. FUNCTION VE TRIGGER
-- =====================================================

CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$;

ALTER FUNCTION public.handle_updated_at() OWNER TO postgres;

CREATE TRIGGER handle_callback_requests_updated_at
    BEFORE UPDATE ON public.callback_requests
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- =====================================================
-- 5. GÜVENLİK POLİTİKALARI
-- =====================================================

CREATE POLICY "authenticated_full_access"
ON public.callback_requests
FOR ALL
TO authenticated
USING (true)
WITH CHECK (true);

CREATE POLICY "anonymous_insert_only"
ON public.callback_requests
FOR INSERT
TO anon
WITH CHECK (true);

CREATE POLICY "anonymous_no_select"
ON public.callback_requests
FOR SELECT
TO anon
USING (false);

-- =====================================================
-- 6. TEST VERİLERİ
-- =====================================================

INSERT INTO public.callback_requests (name, phone, status, notes) VALUES 
('Ahmet Yılmaz', '0532 123 45 67', 'pending', null),
('Ayşe Demir', '0533 987 65 43', 'called', 'Hasta ile görüşüldü, randevu 15.01.2024 saat 14:00'),
('Mehmet Kaya', '0534 555 44 33', 'completed', 'Tedavi başarıyla tamamlandı'),
('Fatma Özkan', '0535 111 22 33', 'pending', null),
('Ali Çelik', '0536 777 88 99', 'cancelled', 'Hasta başka kliniği tercih etti'),
('Zeynep Aksoy', '0537 444 55 66', 'called', 'Randevu alındı, hatırlatma SMS gönderildi'),
('Mustafa Erdoğan', '0538 222 33 44', 'pending', null);

-- =====================================================
-- KURULUM TAMAMLANDI - ARTIK OPERASYONEL SORGULAR
-- =====================================================

-- =====================================================
-- 7. API İŞLEMLERİ
-- =====================================================

-- Yeni talep ekleme
INSERT INTO public.callback_requests (name, phone)
VALUES ('Test Kullanıcı', '0539 999 88 77')
RETURNING id, name, phone, status, created_at;

-- Tüm talepleri listeleme
SELECT 
    id,
    name,
    phone,
    status,
    notes,
    created_at,
    updated_at,
    called_at
FROM public.callback_requests
ORDER BY created_at DESC
LIMIT 50 OFFSET 0;

-- ID'ye göre tek talep getirme
SELECT 
    id,
    name,
    phone,
    status,
    notes,
    created_at,
    updated_at,
    called_at
FROM public.callback_requests
WHERE id = 1;

-- Durum güncelleme
UPDATE public.callback_requests 
SET 
    status = 'called',
    called_at = CASE 
        WHEN 'called' = 'called' AND called_at IS NULL 
        THEN timezone('utc'::text, now()) 
        ELSE called_at 
    END
WHERE id = 1
RETURNING *;

-- Not ekleme
UPDATE public.callback_requests 
SET notes = 'Hasta ile görüşüldü, randevu alındı'
WHERE id = 1
RETURNING *;

-- Tam güncelleme
UPDATE public.callback_requests 
SET 
    status = 'completed',
    notes = 'Tedavi tamamlandı'
WHERE id = 1
RETURNING *;

-- Talep silme
DELETE FROM public.callback_requests 
WHERE id = 8
RETURNING id;

-- =====================================================
-- 8. ADMİN PANEL SORGULARI
-- =====================================================

-- Durum bazında filtreleme
SELECT 
    id,
    name,
    phone,
    status,
    notes,
    created_at,
    updated_at,
    called_at
FROM public.callback_requests
WHERE status = 'pending'
ORDER BY created_at DESC;

-- İsim ve telefon arama
SELECT 
    id,
    name,
    phone,
    status,
    notes,
    created_at,
    updated_at,
    called_at
FROM public.callback_requests
WHERE 
    LOWER(name) LIKE LOWER('%ahmet%') 
    OR phone LIKE '%532%'
ORDER BY created_at DESC;

-- Tarih aralığında filtreleme
SELECT 
    id,
    name,
    phone,
    status,
    notes,
    created_at,
    updated_at,
    called_at
FROM public.callback_requests
WHERE 
    created_at >= '2024-01-01'::timestamp 
    AND created_at <= '2024-12-31'::timestamp
ORDER BY created_at DESC;

-- =====================================================
-- 9. İSTATİSTİK SORGULARI
-- =====================================================

-- Genel istatistikler
SELECT 
    COUNT(*) as toplam,
    COUNT(*) FILTER (WHERE status = 'pending') as bekleyen,
    COUNT(*) FILTER (WHERE status = 'called') as aranan,
    COUNT(*) FILTER (WHERE status = 'completed') as tamamlanan,
    COUNT(*) FILTER (WHERE status = 'cancelled') as iptal_edilen,
    COUNT(*) FILTER (WHERE DATE(created_at) = CURRENT_DATE) as bugun_toplam,
    COUNT(*) FILTER (WHERE DATE(created_at) = CURRENT_DATE AND status = 'pending') as bugun_bekleyen
FROM public.callback_requests;

-- Son 30 günün trendi
SELECT 
    DATE(created_at) as tarih,
    COUNT(*) as toplam_talep,
    COUNT(*) FILTER (WHERE status = 'pending') as bekleyen,
    COUNT(*) FILTER (WHERE status = 'called') as aranan,
    COUNT(*) FILTER (WHERE status = 'completed') as tamamlanan,
    COUNT(*) FILTER (WHERE status = 'cancelled') as iptal_edilen
FROM public.callback_requests
WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY DATE(created_at)
ORDER BY tarih DESC;

-- Haftalık performans
SELECT 
    DATE_TRUNC('week', created_at)::date as hafta_baslangici,
    COUNT(*) as gelen_talep,
    COUNT(*) FILTER (WHERE status IN ('called', 'completed')) as islenen_talep,
    ROUND(
        (COUNT(*) FILTER (WHERE status IN ('called', 'completed')) * 100.0) / 
        NULLIF(COUNT(*), 0), 
        2
    ) as basari_orani_yuzde
FROM public.callback_requests
WHERE created_at >= CURRENT_DATE - INTERVAL '8 weeks'
GROUP BY DATE_TRUNC('week', created_at)
ORDER BY hafta_baslangici DESC;

-- Ortalama yanıt süresi
SELECT 
    COUNT(*) FILTER (WHERE called_at IS NOT NULL) as cevaplanan_talep,
    ROUND(AVG(EXTRACT(EPOCH FROM (called_at - created_at))/3600)::numeric, 2) as ortalama_yanit_saati,
    ROUND(MIN(EXTRACT(EPOCH FROM (called_at - created_at))/3600)::numeric, 2) as en_hizli_yanit_saati,
    ROUND(MAX(EXTRACT(EPOCH FROM (called_at - created_at))/3600)::numeric, 2) as en_yavas_yanit_saati
FROM public.callback_requests
WHERE called_at IS NOT NULL;

-- =====================================================
-- 10. BAKIM İŞLEMLERİ
-- =====================================================

-- 30 günden eski tamamlanan talepleri silme
DELETE FROM public.callback_requests 
WHERE 
    status = 'completed' 
    AND updated_at < CURRENT_TIMESTAMP - INTERVAL '30 days';

-- 7 günden eski iptal edilen talepleri silme
DELETE FROM public.callback_requests 
WHERE 
    status = 'cancelled' 
    AND updated_at < CURRENT_TIMESTAMP - INTERVAL '7 days';

-- Test verilerini temizleme
DELETE FROM public.callback_requests 
WHERE 
    LOWER(name) LIKE '%test%' 
    OR LOWER(name) LIKE '%deneme%'
    OR phone LIKE '%000%'
    OR phone = '0000000000'
    OR name = 'Test User'
    OR name = 'Test Kullanıcı';

-- Geçersiz kayıtları temizleme
DELETE FROM public.callback_requests 
WHERE 
    TRIM(name) = '' 
    OR name IS NULL 
    OR TRIM(phone) = '' 
    OR phone IS NULL
    OR LENGTH(REGEXP_REPLACE(phone, '[^0-9]', '', 'g')) < 10;

-- =====================================================
-- 11. VERİ DOĞRULAMA
-- =====================================================

-- Geçersiz telefon numaralarını bul
SELECT 
    id, 
    name, 
    phone,
    LENGTH(REGEXP_REPLACE(phone, '[^0-9]', '', 'g')) as rakam_sayisi,
    created_at
FROM public.callback_requests
WHERE 
    LENGTH(REGEXP_REPLACE(phone, '[^0-9]', '', 'g')) < 10
    OR LENGTH(REGEXP_REPLACE(phone, '[^0-9]', '', 'g')) > 11
ORDER BY created_at DESC;

-- Uzun süre bekleyen talepleri bul
SELECT 
    id, 
    name, 
    phone, 
    created_at,
    EXTRACT(DAY FROM (CURRENT_TIMESTAMP - created_at))::integer as bekleme_gun_sayisi,
    status
FROM public.callback_requests
WHERE 
    status = 'pending' 
    AND created_at < CURRENT_TIMESTAMP - INTERVAL '24 hours'
ORDER BY created_at ASC;

-- Duplicate telefon numaralarını bul
SELECT 
    phone,
    COUNT(*) as tekrar_sayisi,
    array_agg(id ORDER BY created_at) as id_listesi,
    array_agg(name ORDER BY created_at) as isim_listesi,
    MIN(created_at) as ilk_talep,
    MAX(created_at) as son_talep
FROM public.callback_requests
GROUP BY phone
HAVING COUNT(*) > 1
ORDER BY COUNT(*) DESC, phone;

-- =====================================================
-- 12. YEDEKLEME İŞLEMLERİ
-- =====================================================

-- Yedek tablo oluştur
CREATE TABLE public.callback_requests_backup_2024 AS 
SELECT * FROM public.callback_requests
WHERE created_at < CURRENT_TIMESTAMP - INTERVAL '90 days';

-- Yedeklenen kayıt sayısını kontrol et
SELECT 
    COUNT(*) as yedeklenen_kayit,
    MIN(created_at) as en_eski_tarih,
    MAX(created_at) as en_yeni_tarih
FROM public.callback_requests_backup_2024;

-- Eski kayıtları sil (yedekleme sonrası)
DELETE FROM public.callback_requests 
WHERE created_at < CURRENT_TIMESTAMP - INTERVAL '90 days';

-- =====================================================
-- 13. TABLO BİLGİLERİ VE KONTROLLER
-- =====================================================

-- Kayıt sayısı kontrolü
SELECT COUNT(*) as toplam_kayit FROM public.callback_requests;

-- Son eklenen kayıtlar
SELECT * FROM public.callback_requests 
ORDER BY created_at DESC 
LIMIT 10;

-- En eski kayıtlar
SELECT * FROM public.callback_requests 
ORDER BY created_at ASC 
LIMIT 10;

-- Tablo boyut bilgisi
SELECT 
    t.table_name,
    t.table_schema,
    pg_size_pretty(pg_total_relation_size(c.oid)) as table_size,
    pg_size_pretty(pg_relation_size(c.oid)) as data_size
FROM information_schema.tables t
JOIN pg_class c ON c.relname = t.table_name
WHERE t.table_name = 'callback_requests' 
AND t.table_schema = 'public';

-- Index kullanım istatistikleri
SELECT 
    schemaname,
    tablename,
    indexname,
    idx_scan,
    idx_tup_read,
    idx_tup_fetch
FROM pg_stat_user_indexes 
WHERE tablename = 'callback_requests';

-- Tablo istatistikleri
SELECT 
    n_tup_ins as toplam_insert,
    n_tup_upd as toplam_update,
    n_tup_del as toplam_delete,
    n_live_tup as aktif_kayit,
    n_dead_tup as silinen_kayit,
    last_vacuum,
    last_autovacuum,
    last_analyze,
    last_autoanalyze
FROM pg_stat_user_tables 
WHERE relname = 'callback_requests';

-- =====================================================
-- 14. ACİL DURUM İŞLEMLERİ (DİKKATLİ KULLAN!)
-- =====================================================

-- Tüm verileri sil (ID'leri sıfırla)
-- TRUNCATE TABLE public.callback_requests RESTART IDENTITY CASCADE;

-- Tabloyu tamamen sil
-- DROP TABLE IF EXISTS public.callback_requests CASCADE;

-- Function'ı sil
-- DROP FUNCTION IF EXISTS public.handle_updated_at() CASCADE;

-- Yedek tabloları sil
-- DROP TABLE IF EXISTS public.callback_requests_backup_2024 CASCADE;

-- =====================================================
-- DOSYA SONU - TÜM İŞLEMLER TAMAMLANDI
-- =====================================================
-- 
-- KULLANIM REHBERİ:
-- 1. İlk kurulum: Bölüm 1-6'yı çalıştır
-- 2. API işlemleri: Bölüm 7'yi kullan
-- 3. Admin panel: Bölüm 8-9'u kullan
-- 4. Bakım: Bölüm 10-12'yi kullan
-- 5. Kontrol: Bölüm 13'ü kullan
-- 6. Acil durum: Bölüm 14'ü kullan (DİKKATLİ!)
-- 
-- NOT: Bu dosya geri arama sistemi için gereken TÜM SQL sorgularını içerir.
-- Başka hiçbir SQL dosyasına ihtiyaç yoktur.
-- ===================================================== 